<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://k-gregor.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://k-gregor.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-07T15:53:48+00:00</updated><id>https://k-gregor.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal website of Konstantin Gregor:. </subtitle><entry><title type="html">Proper variable naming</title><link href="https://k-gregor.github.io/blog/2024/code/" rel="alternate" type="text/html" title="Proper variable naming"/><published>2024-08-05T15:09:00+00:00</published><updated>2024-08-05T15:09:00+00:00</updated><id>https://k-gregor.github.io/blog/2024/code</id><content type="html" xml:base="https://k-gregor.github.io/blog/2024/code/"><![CDATA[<p>Proper variable naming is the number one step to making your code readable and understandable. Check out the following code. It is simple, yet you have no idea what is going on there:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>  <span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
  <span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
  <span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
  
  <span class="n">a</span> <span class="o">=</span> <span class="mf">0.02</span>
  <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="n">xx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
  <span class="n">yy</span> <span class="o">=</span> <span class="n">b</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">a</span><span class="p">)</span><span class="o">**</span><span class="n">xx</span>
  <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span> <span class="n">yy</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Comments might make this code more understandable. But still, if we use the variable <code class="language-plaintext highlighter-rouge">a</code> at another point in the code, we’d have no idea what we’re dealing with and have to go back to the declaration to find out:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre>  <span class="n">a</span> <span class="o">=</span> <span class="mf">0.02</span> <span class="c1"># interest rate
</span>  <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># initial investment
</span>  <span class="n">xx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="c1"># years
</span>  <span class="n">yy</span> <span class="o">=</span> <span class="n">b</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">a</span><span class="p">)</span><span class="o">**</span><span class="n">xx</span> <span class="c1"># money value after x years
</span>  <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span> <span class="n">yy</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>With proper variable names, the code is easy to understand:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre>  <span class="n">interest_rate</span> <span class="o">=</span> <span class="mf">0.02</span>
  <span class="n">initial_investment</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="n">time_years</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
  <span class="n">all_that_money_in_my_bank_account</span> <span class="o">=</span> <span class="n">initial_investment</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">interest_rate</span><span class="p">)</span><span class="o">**</span><span class="n">time_years</span>
  <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">time_years</span><span class="p">,</span> <span class="n">all_that_money_in_my_bank_account</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>In languages like Python you can even have named function parameters. We can thus extract the code into a well-named function (which we can then also easily test) and have a very understandable function call:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre>  <span class="k">def</span> <span class="nf">calculate_bank_account_value</span><span class="p">(</span><span class="n">initial_investment</span><span class="p">,</span> <span class="n">interest_rate</span><span class="p">,</span> <span class="n">time_in_years</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">initial_investment</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">interest_rate</span><span class="p">)</span><span class="o">**</span><span class="n">time_in_years</span>
  
  <span class="nf">calculate_bank_account_value</span><span class="p">(</span><span class="n">initial_investment</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">interest_rate</span><span class="o">=</span><span class="mf">0.02</span><span class="p">,</span> <span class="n">time_in_years</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="code"/><category term="code"/><summary type="html"><![CDATA[A trivial yet sometimes overlooked aspect of making your code readable]]></summary></entry></feed>