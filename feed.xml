<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://k-gregor.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://k-gregor.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-17T09:04:35+00:00</updated><id>https://k-gregor.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal website of Konstantin Gregor:. </subtitle><entry><title type="html">5 Must-know command-line commands for scientists</title><link href="https://k-gregor.github.io/blog/2025/commandline/" rel="alternate" type="text/html" title="5 Must-know command-line commands for scientists"/><published>2025-06-16T15:09:00+00:00</published><updated>2025-06-16T15:09:00+00:00</updated><id>https://k-gregor.github.io/blog/2025/commandline</id><content type="html" xml:base="https://k-gregor.github.io/blog/2025/commandline/"><![CDATA[<h1 id="why-bother">Why bother?</h1> <p>Why should you bother about such a nerdy tool? Well:</p> <ul> <li>You can do numerous things with LARGE files EXTREMELY fast and memory-efficient</li> <li>Quickly do things on a cluster without downloading data first</li> <li>Such modifications can be automated, unlike opening the file in Excel and modifying it</li> <li>With wildcards (like <code class="language-plaintext highlighter-rouge">*</code> or <code class="language-plaintext highlighter-rouge">?</code>) you can directly do the same thing to multiple files at once</li> </ul> <p>Here, I show you 5 commands to deal with datasets that can really improve your efficiency with datasets. And of course you can ask chatGPT to help you with the commands, so it is even easier. So you just need to know about the general capabilities of the command line.</p> <p>Let’s go.</p> <hr/> <h1 id="command-1-head--tail">Command 1: head / tail</h1> <p>Simply gets the first or last lines of a file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">head </span>file.txt
<span class="nb">head</span> <span class="nt">-5</span> file.txt
<span class="nb">tail </span>file.txt
<span class="nb">tail</span> <span class="nt">-f</span> file.txt <span class="c"># follows while file is being written to --&gt; check progress while a program is writing to that file</span>
</code></pre></div></div> <hr/> <h1 id="command-2-awk">Command 2: awk</h1> <p>Gets you columns of data. You can also do computations with it</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">awk</span> <span class="nt">-F</span> <span class="s2">"&lt;DELIMITER&gt;"</span> <span class="s1">'{ COMMAND }'</span>
</code></pre></div></div> <p>Example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># get first column of a file (delimited by spaces)</span>
<span class="nb">awk</span> <span class="nt">-F</span> <span class="s2">" "</span> <span class="s1">'{print $1}'</span> file.txt

<span class="c"># get first two columns, sum up next three</span>
<span class="nb">awk</span> <span class="nt">-F</span> <span class="s2">" "</span> <span class="s1">'{print $1,$2,$3+$4+$5}'</span> file.txt
</code></pre></div></div> <hr/> <h1 id="command-3-sed">Command 3: sed</h1> <p>Can replace text, add text, or remove text from a file based on a search string.</p> <ul> <li>Syntax: <ul> <li>s: substitute</li> <li>g: globally (in entire file)</li> </ul> </li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sed 's/&lt;SYMBOL&gt;/&lt;REPLACEMENT&gt;/g filename.txt
</code></pre></div></div> <p>Example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Replace every mention of Year with YEAR in a file (note, this just writes the output to the terminal, it does not change the file)</span>
<span class="nb">sed</span> <span class="s1">'s/Year/YEAR/g'</span> file.txt

<span class="c"># Replace every mention of Year with YEAR in all files starting with "myfile" and ending in ".txt" and do the replacement in-place in the files!</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/Year/YEAR/g'</span> myfile<span class="k">*</span>.txt
</code></pre></div></div> <hr/> <h1 id="command-4-grep">Command 4: grep</h1> <p>It helps you find stuff within files. You can combine it with other commands using the <code class="language-plaintext highlighter-rouge">|</code> (“pipe”) operator, for instance, to count the number of lines containing a certain word using the function <code class="language-plaintext highlighter-rouge">wc</code> (word count).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Note that grep 2010 cpool.out also works, but finds a line that contains, e.g., 4.420104</span>
<span class="nb">grep</span> <span class="s2">" 2010 "</span> file.txt
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># How many lines in the file contain 2010 </span>
<span class="nb">grep</span> <span class="s2">" 2010 "</span> file.txt | <span class="nb">wc</span> <span class="nt">-l</span>

<span class="c"># Do the same for all files within directories starting with "run"</span>
<span class="nb">grep</span> <span class="s2">" 2010 "</span> run<span class="k">*</span>/file.txt | <span class="nb">wc</span> <span class="nt">-l</span>

<span class="c"># Show also lines around the found lines (-C stands for "context"):</span>
<span class="nb">grep</span> <span class="nt">-C</span> 2 <span class="s2">" 2010 "</span> file.txt
</code></pre></div></div> <hr/> <h1 id="command-5-md5sum">Command 5: md5sum</h1> <p>Can immediately tell you whether two files are <strong>exactly</strong> the same. It computes a “hash” of the file, basically just a weird-looking combination of letters and numbers (technically, it’s actually a number, but we don’t need to bother about this now). If there is the tiniest difference in a file, the command will produce a completely different hash.</p> <p>Assume we three files of which two are actually identical. We can easily check this via:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">md5sum </span>file1.txt file2.txt file3.txt
0e64fe596b2fd856d50c2a5e42e3fe0d  file1.txt
ccf28066f0b00c85be1f9a76358ae8f7  file2.txt
0e64fe596b2fd856d50c2a5e42e3fe0d  file3.txt
</code></pre></div></div> <hr/> <h1 id="one-final-thing-history--ctrlr">One final thing: history / ctrl+r</h1> <p>The <code class="language-plaintext highlighter-rouge">history</code> command shows you all commands that you made previously, so you can reuse them. Pressing CTRL+r on your keyboard also lets you search for commands you have executed.</p> <h1 id="summary">Summary</h1> <p>So, I hope these short examples could show you how powerful the command line can be. Now that you know that this is possible, you can easily ask chatGPT “How do I replace all occurrences of the word ‘hello’ in a text file with ‘hi’ using the command line?”. Hopefully, this can make your work more efficient :)</p>]]></content><author><name></name></author><category term="code"/><category term="code"/><summary type="html"><![CDATA[You should know about these commands for blazing fast data manipulation!]]></summary></entry><entry><title type="html">A comprehensive explanation of radiative forcing and friends</title><link href="https://k-gregor.github.io/blog/2025/radiative-forcing/" rel="alternate" type="text/html" title="A comprehensive explanation of radiative forcing and friends"/><published>2025-02-01T15:09:00+00:00</published><updated>2025-02-01T15:09:00+00:00</updated><id>https://k-gregor.github.io/blog/2025/radiative-forcing</id><content type="html" xml:base="https://k-gregor.github.io/blog/2025/radiative-forcing/"><![CDATA[<p>Radiative forcing is a key concept in climate science. However, it is a complex topic and sometimes details are omitted or terms used interchangeably, which makes it hard to grasp. Therefore, I here try to summarize and synthesize the most important definitions, concepts, and their relations.</p> <p>Let’s start with two keywords:</p> <ul> <li>Forcing: a perturbation to a system from a given state due to an external driver. The forcings we mean here may be greenhouse gas emissions, or land cover change.</li> <li>TOA: The top of the atmosphere - 100km above Earth’s surface.</li> </ul> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/lamp-480.webp 480w,/assets/img/blogpostimgs/lamp-800.webp 800w,/assets/img/blogpostimgs/lamp-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/lamp.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Why the hell is there an image of a desk lamp? Well, you'll find out when you read the whole post. Also, I needed a picture to loosen up the text. Photo by Yury Rymko, pexels.com </div> <h3 id="definition-of-radiative-forcing">Definition of radiative forcing</h3> <p>Radiative forcing refers to the immediate change in the top-of-atmosphere (TOA) energy balance (incoming vs outgoing energy) due to an external driver, before the surface can adapt.</p> <p>Zero radiative forcing than means that the Earth is in energy equilibrium with the Sun. The amount of energy coming in from the sun is the same as goes out from longwave radiation and Earth has an equilibrium average temperature. This was roughly the case before the industrial revolution. Of course, solar energy input varies over the course of a year due to the way Earth and Sun are standing relative to one another, but on average, the energy budget remains the same.</p> <p>Formally, the IPCC defines radiative forcing as “the change in the net, downward minus upward, radiative flux (expressed in W/m\(^2\)) due to a change in an external driver of climate change.” Those external drivers could be changes in solar radiation, volcanic activity, emissions of greenhouse gases, or land cover change. The IPCC marks the year 1750 as the baseline, assuming for this time a planet roughly in balance, and around zero radiative forcing.</p> <h3 id="types-of-radiative-forcing">Types of radiative forcing</h3> <p>Generally, scientists and the IPCC use the single term <em>radiative forcing</em>. But there are actually three types of it. Here are some details on the different types, but you can skip this information on first read. You can continue at “How is radiative forcing related to the energy balance of the Earth?”.</p> <h5 id="instantaneous-radiative-forcing-irf">Instantaneous radiative forcing (IRF)</h5> <p>IRF is defined as the change in the net TOA radiative flux following a perturbation, excluding any adjustments (IPCC-AR6-WGI, p. 941). So, for instance, blowing greenhouse gases into the atmosphere will change how much radiation leaves the planet, and thereby creates an IRF. But the system does not stay that way! This immediate change in energy balance (and atmospheric composition) will lead to numerous other changes that occur. Therefore, there are two other radiative forcings defined: IRF is not really used by the IPCC except for some particular ones related to aerosols.</p> <h5 id="stratospherically-adjusted-radiative-forcing-sarf">Stratospherically adjusted radiative forcing (SARF)</h5> <p>SARF is defined as IRF plus the response to stratospheric temperature adjustments (IPCC-AR6-WGI, p. 941). What this means is, blowing carbon dioxide into the air will actually lead to a cooling in the stratosphere (which starts between 8 and 18km above ground, <a href="https://esd.copernicus.org/preprints/esd-2016-8/esd-2016-8.pdf">Goessling and Bathiany, 2016</a>)! This stratospheric cooling, by the way, is a key aspect of how the human impact of climate change is attributed, just saying (see <a href="https://www.youtube.com/watch?v=J1KGnCj_cfM">this video</a>).</p> <p>SARF is computed with models, by fixing tropospheric properties, but allowing for stratospheric temperatures to readjust after a forcing (IPCC-AR6-WGI-Annex-VII).</p> <h5 id="effective-radiative-forcing-erf">Effective radiative forcing (ERF)</h5> <p>ERF is the most important radiative forcing. It quantifies the change in the net TOA energy flux of the Earth system due to a forcing, after accounting for adjustments in both tropospheric and stratospheric temperatures, water vapour, clouds, and some surface properties, such as surface albedo from vegetation changes, that are unrelated to surface temperatures (IPCC-AR6-WGI, Box 7.1). These adjustments used to be called “rapid adjustments” but that’s not the case anymore, it’s “the independence from surface temperature rather than the rapidity” that matters (IPCC-AR6-WGI 7.3). But the processes that are contained are usually fast processes that occur within hours to months, unlike the processes driven by the changing surface temperature which take much longer (IPCC-AR6-WGI Box 7.1). Namely, the processes are:</p> <ul> <li><em>tropospheric temperature</em>: similarly to the stratosphere, there are also rapid changes in temperature in the troposphere, before the Earth’s surface temperature will change at all</li> <li><em>water vapor</em>: the changes in tropospheric temperatures will affect the amount of water vapor that can stay there</li> <li><em>clouds</em>: changes in tropospheric temperatures (and aerosols) also affect clouds</li> <li><em>albedo/land cover</em>: for instance, when the driver of a forcing is land use change, there are also direct changes to the albedo, affecting the energy balance as well, but see also my example below.</li> </ul> <p>Processes that are <strong>not included in ERF</strong> are those that are driven by <strong>surface</strong> temperature changes, for instance, ice albedo feedback, water vapor feedback, lapse rate feedback, or cloud feedbacks (<a href="https://acp.copernicus.org/articles/20/9591/2020/">Smith et al., 2020</a>)</p> <p>The IPCC calls the ERF <strong>the central definition of radiative forcing</strong> (IPCC-AR6-WGI, Box 7.1)</p> <h5 id="how-much-different-are-they">How much different are they?</h5> <p>Table 7.4 in IPCC-AR6-WGI shows values for SARF, the necessary adjustments, and the ERF for a doubling of CO\(_2\) from 278ppm. The SARF is estimated at 3.75 W/m\(^2\) and the ERF at 3.93 W/m\(^2\), so they differ by about 5% from each other. The difference results from the different adjustments:</p> \[\begin{align} &amp; 3.75 &amp; \text{SARF} \\ - &amp; 0.6 &amp; \text{troposphere temperature adjustment} \\ + &amp; 0.22 &amp; \text{water vapor adjustment} \\ + &amp; 0.45 &amp; \text{cloud adjustment} \\ + &amp; 0.11 &amp; \text{albedo/land cover adjustment} \\ \hline &amp; 3.93 &amp; \text{ERF} \\ \end{align}\] <p>The small land cover / albedo adjustment could stem from the fact that increases in CO\(_2\) have quite quick responses in vegetation, for instance that there is less evaporation since plants have more CO\(_2\) available and then need to open their stomata less to get the CO\(_2\) they need. This leads to changes in soil moisture and albedo. Plants also potentially grow better under higher CO\(_2\) (all other factors being equal), so another effect could be more greening, which also affects albedo.</p> <p>And why is the troposphere temperature adjustment negative? Well, unlike the stratosphere, which cools with increasing levels of CO\(_2\), the troposphere warms. So then, there will be increased emissions of longwave radiation, thereby increasing longwave radiation going out to space, thus decreasing the energy imbalance. Note that this is an extreme simplification of things :).</p> <h3 id="how-is-radiative-forcing-related-to-the-energy-balance-of-the-earth">How is radiative forcing related to the energy balance of the Earth?</h3> <p>This is where it often gets tricky for people, and the relation between RF and the energy balance is a common point of misconception. <strong>Because they are not the same thing!</strong></p> <p>So, what happens to a radiative forcing over time? With time, Earth will warm up, thereby increasing the outgoing longwave energy, and thus decreasing again the energy imbalance at TOA that was initially created from the radiative forcing. So does radiative forcing go down? No! Here’s why: Let’s say we are on Earth in pre-industrial times, with a balanced energy budget, so the same amount of solar energy is coming in as the longwave radiation going out. We have 278 ppm CO\(_2\) in the air. One day, we burn so much coal, oil, and gas, that we double the concentrations in the air to 576 ppm (note: we are currently at ~425 ppm in January 2025, https://gml.noaa.gov/ccgg/trends/).</p> <p>This doubling of CO\(_2\), as we have now learned, leads to a positive radiative forcing - it changes the net balance between incoming and outgoing radiation, leading to an imbalance, with more energy coming in than going out. Let’s say this change is 4 W/m\(^2\). What happens now? Well, the planet warms! With this warming, the outgoing longwave radiation increases, so the imbalance slowly goes down while the planet warms, until a balance is reached again. So, the radiative forcing becomes zero, right? No! The radiative forcing still only refers the <strong>initial change in the system</strong>. If the CO\(_2\) concentrations remain at 576 ppm, the radiative forcing will still be those initial 4 W/m\(^2\) because it refers to the external change that was applied to the system! But, of course, the energy imbalance has gone down. That’s why I say it’s a matter of vocabulary: The imbalance at the top of the atmosphere, which was initially also 4W/m\(^2\) due to the radiative forcing, will eventually go down to zero again, when the planet has warmed sufficiently. How much warming that is, is in this case called the <strong>Equilibrium Climate Sensitivity (ECS)</strong>. I say “in this case” because ECS specifically refers to the experiment of doubling CO\(_2\), nothing else. If we don’t double the CO\(_2\) concentrations, the effect is similar, but the temperature that is reached will not be called ECS. Fig 1 from the IPCC report illustrates this example: The energy imbalance starts off at the same value as the radiative forcing (4 W/m\(^2\)), and goes down to zero as the surface temperature increases.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/ecs-480.webp 480w,/assets/img/blogpostimgs/ecs-800.webp 800w,/assets/img/blogpostimgs/ecs-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/ecs.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Fig 1 in Box 7.1 in IPCC-AR6-WGI. Doubling of CO_2 concentrations from pre-industrial and the corresponding effective radiative forcing (y axis intercept) and equilibrium climate sensitivity ECS. </div> <h5 id="a-note-on-doubling-co_2-concentrations">A note on doubling CO\(_2\) concentrations</h5> <p>Now you might say, “Wait a minute! Ok, it makes sense that temperatures increase until the energy balance is eventually 0 W/m\(^2\) again after we blew all that carbon into the air. But, I’ve read the Global Carbon Budget, and that stuff doesn’t stay up there! Vegetation and ocean will take up roughly half of this again!” (<a href="https://essd.copernicus.org/articles/15/5301/2023/">Friedlingstein et al, 2023</a>). Yes, that is a very important point! This doubling of CO\(_2\) is quite an idealized scenario. It is very helpful to understand and quantify mechanisms, but it ignores a bunch of things! It assumes, that the concentrations remain doubled in the atmosphere forever (well, or until the time that the energy balance is zero again, because then the experiment is over). But, yeah, having stable concentrations would actually require us to blow some more carbon into the air, to maintain the levels. If we didn’t do that, concentrations would go down, because plants and oceans will take up some of that additional carbon from the atmosphere. To assess what would really happen if we blew all that CO\(_2\) in the air, we need to talk about TCRE - the <em>transient climate response to cumulative emissions of CO\(_2\)</em>. This really refers to blowing carbon in the air to a certain extent, and then see what happens while also accounting for the carbon cycle, i.e., carbon uptake by plants and ocean. I don’t want to go into more detail here, but I found it important to mention this aspect for clarity.</p> <h3 id="enough-of-the-theories-what-are-the-numbers">Enough of the theories, what are the numbers?</h3> <h5 id="how-much-is-the-current-radiative-forcing">How much is the current radiative forcing?</h5> <p>The total anthropogenic ERF in 2019, relative to 1750, was estimated at 2.72 [1.96 to 3.48] W/m\(^2\) compared to 2019 according to the IPCC, with increasing growing rates (IPCC-AR6-WGI-TS, p 67).</p> <p>This figure shows the estimated radiative forcing over time. In 1750, it was close to zero. Then we started blowing greenhouse gases into the air. Not much changed for a while, probably because land and ocean took up most of this excess CO\(_2\), so no big deal. But with time, the emissions became larger and larger, and the radiative forcing went up. Note also the negative radiative forcing from tropospheric aerosols! This is basically pollution, which blocks sunlight and thereby decreases the total radiative forcing. You can also see that the pollution is going down since around 2000 (its RF is going up). This is good for human and animal health, but actually will increase global warming. Quite the conundrum. Note also the huge spikes from volcanoes but also how short they last. Solar influence is barely visible in the graph. It has a tiny impact.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/erf_past-480.webp 480w,/assets/img/blogpostimgs/erf_past-800.webp 800w,/assets/img/blogpostimgs/erf_past-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/erf_past.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Effective radiative forcing in the past to present due to different drivers. Figure from IPCC-AR6-WGI TS. </div> <h5 id="how-much-is-the-current-energy-imbalance">How much is the current energy imbalance?</h5> <p>Ok, we now know by how much we changed the system. But what does this mean for the actual energy imbalance, since we learned that the two are not the same? Well, measuring the energy imbalance is really hard, for instance because it is completely different in different regions. Think about a partially cloudy day. At one location it is sunny, and a lot of solar radiation is coming in, but a few meters away, a cloud will be between the sun and the surface, so the radiative balance is completely different there. But new satellite programs now shed more light onto this question, and current estimates are around 0.7 W/m\(^2\) (IPCC-AR6-WGI) and 0.9 W/m\(^2\) (<a href="https://iopscience.iop.org/article/10.1088/2752-5295/ac6f74">Trenberth and Cheng, 2022</a>). Fig 7.2 of IPCC-AR6-WGI show all major pathways of radiation on Earth, and indicate the imbalance of 0.7 W/m\(^2\).</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/energybudget-480.webp 480w,/assets/img/blogpostimgs/energybudget-800.webp 800w,/assets/img/blogpostimgs/energybudget-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/energybudget.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Earth's current energy budget (Figure from IPCC-AR6-WGI, Fig 7.2) </div> <p>Take a moment to note how little that actually is: not even 1 Watt! The lamp shining on my desk right now has 5 Watts! But remember, this is per m2, so we’re talking about <strong>A LOT</strong> of lamps. The total imbalance summed up over the Earth’s surface is roughly 460 TW, which is about 80 times the total electricity generation on Earth, so yeah, that stuff matters a lot.</p> <h3 id="radiative-forcing-in-the-future">Radiative forcing in the future</h3> <p>So how will this look like in the future? The IPCC uses shared socio-economic pathways to estimate human behavior in the future and thereby estimate our impact on the climate. These contain assumptions about population growth, GDP, which result in certain emissions and land use patterns. Those scenarios are labeled SSPX-Y, e.g., SSP3-7.0. The number X here represents the socio-economic pathway and we will ignore that here. The number Y “refers to the approximate target level of radiative forcing (in W m–-2) resulting from the scenario in the year 2100.” (IPCC-AR6-WGI-TS, p. 54</p> <p>So for instance, an SSPX-2.6 pathway is a pathway where radiative forcing peaks at approximately 3 W/m\(^2\) and then declines to be limited at 2.6 W/m\(^2\) in 2100 (IPCC-AR6-WGI-AnnexVII, glossary for RCP). Remember that we said above that the radiative forcing is not the same as the imbalance, and is just a measure of the perturbation to the system. But in this pathway, the radiative forcing goes down! So this means that the initial perturbation will be slightly counteracted, for instance by removing some carbon from the atmosphere again.</p> <p>A short remark as to which type of RF is actually used in the SSP definitions. To be honest, I have gotten furious while writing this because I could not find ANY mention of which radiative forcing the SSP labels actually refer to. However, in the end I found the apparently <em>single</em> mention about this among all thousands of pages of IPCC documents. It is in the executive summary of the WGI report:</p> <blockquote> <p>In the SSP labels, the first number refers to the assumed shared socio-economic pathway, and the second refers to the <strong>approximate global effective radiative forcing (ERF) in 2100</strong>.</p> </blockquote> <p>Of course, the IPCC mentions in other places that ERF is the central definition. But it would have been nice to be more clear about this in the descriptions of the SSPs.</p> <h5 id="will-the-ssp-scenarios-hit-exactly-the-mark-they-should">Will the SSP scenarios hit exactly the mark they should?</h5> <p>No. As stated in <a href="https://gmd.copernicus.org/articles/13/3571/2020/">Meinshausen et al. (2020)</a>:</p> <blockquote> <p>It should be noted that the radiative forcing labels, such as “2.6” in the SSP1-2.6 scenario, are indicative “nameplates” only, approximating total radiative forcing levels by the end of the 21st century. Those labels are merely indicative, given that actual radiative forcing uncertainties (and differences across ESMs that implement the same concentrations, aerosol abundances, ozone fields, and land use patterns) are substantial.</p> </blockquote> <p>Interestingly, the labels are quite a bit off in some cases. See for example the following figure (IPCC-AR6-WGI, Fig 4.35) that shows a few SSPs. SSP5-8.5, for instance, reaches 10 W/m\(^2\) in 2100, not 8.5 W/m\(^2\).</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/erf_future-480.webp 480w,/assets/img/blogpostimgs/erf_future-800.webp 800w,/assets/img/blogpostimgs/erf_future-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/erf_future.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Effective radiative forcing in the future in numerous scenarios. Note the difference between SSPs and RCPs and also that the SSPs don't get exactly to the prescribed value (e.g., SSP5-8.5 reaches 10 W/m^2 in 2100! (Figure from IPCC-AR6-WGI, Fig 4.35) </div> <p>Note that the lines are model medians (not means), the spread comes from different representation of processes by the models, leading to somewhat different radiative forcings. More values can be found in the Annex of that report (Tables AIII.4, IPCC-AR6-WGI-AnnexIII)</p> <p>See also <a href="https://acp.copernicus.org/articles/20/9591/2020/">Smith et al., 2020</a> for more details on the different RFs computed by the models of CMIP6.</p> <h5 id="are-rcp85-and-sspx-85-the-same">Are RCP8.5 and SSPX-8.5 the same?</h5> <p>Actually no, there is a difference because the way that RF was computed changed over time. While SSPX-Y refers to Y effective radiative forcing, RCPY refers to SARF while SSPX-Y refers to the effective radiative forcing. Notably, if you look at the figure above, where the ERF is computed for both SSPs and RCPs, they also do not align.</p> <p>And the IPCC also states:</p> <blockquote> <p>The SSP scenarios and previous RCP scenarios are not directly comparable. First, the gas-to-gas compositions differ; for example, the SSP5-8.5 scenario has higher CO\(_2\) concentrations but lower CH4 concentrations compared to RCP8.5 (IPCC-AR6-WGI p. 231)</p> </blockquote> <h1 id="conclusion">Conclusion</h1> <p>If you read till here, congratulations! This really was quite complex. It took me a full week of reading to finally get it and hopefully my summary was helpful to you. Here are the main points:</p> <ul> <li>RF is a complicated topic <ul> <li>There are three types of RF, ERF is the most important one, accounting for those processes happening after the forcing that are <em>not</em> related to surface temperature change (e.g., changes in stratospheric temperature)</li> </ul> </li> <li>RF is not the energy imbalance, only the forcing. While the energy imbalance will go down with warming, the forcing will remain constant (referring to the perturbation to initial conditions) <ul> <li>The RF can be reduced by countermeasures to the original perturbation, e.g., removal of CO\(_2\) from the atmosphere</li> </ul> </li> <li>Current radiative forcing is around 2.7 W/m\(^2\), Current energy imbalance is around 0.7-0.9 W/m\(^2\)</li> <li>Projections of SSPs refer to the ERF and only roughly reach the prescribed RF values in 2100</li> </ul> <p><br/><br/></p> <h5 id="references-ipcc-reports">References (IPCC Reports)</h5> <ul> <li>IPCC-AR6-WGI: https://www.ipcc.ch/report/ar6/wg1/downloads/report/IPCC_AR6_WGI_FullReport.pdf</li> <li>IPCC-AR6-WGI-Annex-III: https://www.ipcc.ch/report/ar6/wg1/downloads/report/IPCC_AR6_WGI_AnnexIII.pdf</li> <li>IPCC-AR6-WGI-Annex-VII: https://www.ipcc.ch/report/ar6/wg1/downloads/report/IPCC_AR6_WGI_AnnexVII.pdf</li> <li>IPCC-AR6-WGI-TS: https://www.ipcc.ch/report/ar6/wg1/downloads/report/IPCC_AR6_WGI_TS.pdf</li> </ul>]]></content><author><name></name></author><category term="science"/><category term="climate"/><summary type="html"><![CDATA[It's a complex but crucial topic in climate change!]]></summary></entry><entry><title type="html">Memory aspects in scientific coding</title><link href="https://k-gregor.github.io/blog/2024/memory-aspects-in-scientific-coding/" rel="alternate" type="text/html" title="Memory aspects in scientific coding"/><published>2024-11-17T15:09:00+00:00</published><updated>2024-11-17T15:09:00+00:00</updated><id>https://k-gregor.github.io/blog/2024/memory-aspects-in-scientific-coding</id><content type="html" xml:base="https://k-gregor.github.io/blog/2024/memory-aspects-in-scientific-coding/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>When we write scientific code, we often deal with large amounts of data and numerous data processing steps. Not rarely will we face out-of-memory errors, when the data gets too large for our RAM. Here are 5 tips on what to keep in mind when running into such problems.</p> <h1 id="tip-1-understanding-and-profiling">Tip 1: Understanding and Profiling</h1> <p>Before actually working on memory issues, we need to understand them fully. Technically, there are tools called <strong>profilers</strong> that help us with this which I will get into as well. But you can do some very simple things first do understand whether and how your memory is exploding.</p> <h2 id="print-statements">print statements</h2> <p>As a first simple step, add some print statements. This has two benefits: for one, you can see until which point your code actually runs. This already helps tremendously in figuring out what part of the code is making problems. The second benefit is that we can print out the variable sizes, giving us more details on what is currently happening in our memory. Note: Your coding environment (RStudio, DataSpell, …) will also give you options to execute code on a line-by-line basis, and can show you what’s currently stored in memory! Also make use of that. For me, however, I often need to get back to these raw tools, because a coding environment itself requires a lot of memory. So when I am dealing with memory issues, I usually exit the coding environment and run the code from the command line.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">corine_data</span> <span class="o">=</span> <span class="n">rxr</span><span class="p">.</span><span class="nf">open_rasterio</span><span class="p">(</span><span class="sh">'</span><span class="s">other_inputs/corine_data_full_mapped_classes.tif</span><span class="sh">'</span><span class="p">,</span> <span class="n">chunks</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span> <span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1000</span><span class="p">})</span>
<span class="n">pucher_data</span> <span class="o">=</span> <span class="n">rxr</span><span class="p">.</span><span class="nf">open_rasterio</span><span class="p">(</span><span class="sh">'</span><span class="s">/home/konni/Documents/phd/data/forest_age_pucher/agecl_1_perc.tif</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Memory usage of corine_data (approx): </span><span class="si">{</span><span class="n">corine_data</span><span class="p">.</span><span class="n">nbytes</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s"> MB</span><span class="sh">"</span><span class="p">)</span>

<span class="n">target_classes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">311</span><span class="p">,</span> <span class="mi">312</span><span class="p">,</span> <span class="mi">313</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">create mask</span><span class="sh">'</span><span class="p">)</span>
<span class="n">corine_mask</span> <span class="o">=</span> <span class="n">xr</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">corine_data</span><span class="p">.</span><span class="nf">isin</span><span class="p">(</span><span class="n">target_classes</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Memory usage of corine_mask (approx): </span><span class="si">{</span><span class="n">corine_mask</span><span class="p">.</span><span class="n">nbytes</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s"> MB</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">reproject to get CORINE sums in Pucher resolution</span><span class="sh">'</span><span class="p">)</span>
<span class="n">class_count</span> <span class="o">=</span> <span class="n">corine_mask</span><span class="p">.</span><span class="n">rio</span><span class="p">.</span><span class="nf">reproject_match</span><span class="p">(</span><span class="n">match_data_array</span><span class="o">=</span><span class="n">pucher_data</span><span class="p">,</span> <span class="n">resampling</span><span class="o">=</span><span class="n">Resampling</span><span class="p">.</span><span class="nb">sum</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Memory usage of class_count (approx): </span><span class="si">{</span><span class="n">class_count</span><span class="p">.</span><span class="n">nbytes</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s"> MB</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">convert to float</span><span class="sh">'</span><span class="p">)</span>
<span class="n">class_count</span> <span class="o">=</span> <span class="n">class_count</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Memory usage of class_count after conversion to float (approx): </span><span class="si">{</span><span class="n">class_count</span><span class="p">.</span><span class="n">nbytes</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s"> MB</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">divide</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <div class="caption"> This code was initially giving me OOM-errors (out of memory). As a first step, I simply added some print statements which helped me find the culprits. </div> <h2 id="htop-and-similar-tools-to-understand-memory-consumption">htop and similar tools to understand memory consumption</h2> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/htop-480.webp 480w,/assets/img/htop-800.webp 800w,/assets/img/htop-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/htop.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Monitoring resource usage with `htop` </div> <p>htop is a command line tool that shows you the usage of your computer resources. It can show you your memory consumption per program, and also whether the memory is <strong>swapping</strong> (see the <em>Swp</em> line in the image above: 6GB of my swap was in use). This is the computer’s last resort and means that the memory is copied to disk. This keeps the computations alive but makes them extremely slow (often they then will never finish).</p> <p>So, htop (or alternatives) will help you understand what is happening, for instance, how fast the memory is blowing up. Together with the print statements, you can understand where your memory consumption is still in the boundary and when it gets too big. Furthermore, it shows you which other programs are currently taking up memory. As I mentioned previously, for computation-heavy code, I often close all other programs like web-browser, developer environment, and so on.</p> <h2 id="actual-profilers">Actual profilers</h2> <p>There are actually professional tools to do the profiling (= resource analysis) for you, and there are numerous options for each profiling language. Here, I want to show you <code class="language-plaintext highlighter-rouge">mprof</code> which works with Python. Installation and usage is super easy:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash">pip <span class="nb">install </span>memory-profiler
mprof run myscript.py
mprof plot</code></pre></figure> <p>That’s it! This will sample memory usage every 0.1 seconds and give you a plot on the memory performance like the one below. Together with some <code class="language-plaintext highlighter-rouge">print</code> statements will help you tremendously in understanding where the memory blows up.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/mprof-480.webp 480w,/assets/img/blogpostimgs/mprof-800.webp 800w,/assets/img/blogpostimgs/mprof-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/mprof.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Profilers like `mprof` give you full insights on resource usage of your script. </div> <h1 id="tip-2-reduce-the-amount-of-variables-stored-in-memory">Tip 2: Reduce the amount of variables stored in memory</h1> <p>A first simple way to reduce memory consumption is reducing the amount of stuff we’re keeping in memory. Scientific code often looks like this:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">dataset</span> <span class="o">=</span> <span class="nf">read_data</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
<span class="n">dataset_converted</span> <span class="o">=</span> <span class="nf">convert</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>
<span class="n">dataset_interpolated</span> <span class="o">=</span> <span class="nf">interpolate</span><span class="p">(</span><span class="n">dataset_converted</span><span class="p">)</span>
<span class="bp">...</span></code></pre></figure> <p>After the first three lines, do we really need to get back to the original <code class="language-plaintext highlighter-rouge">dataset</code> at any point? Probably not. But your software does not know that, so these variables stay in memory. In this case, you can simply override the original variables like so:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">dataset</span> <span class="o">=</span> <span class="nf">read_data</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
<span class="n">dataset</span> <span class="o">=</span> <span class="nf">convert</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>
<span class="n">dataset</span> <span class="o">=</span> <span class="nf">interpolate</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>
<span class="bp">...</span></code></pre></figure> <p>This allows the programming language’s <strong>garbage collection</strong> processes to free up memory. Basically, they look for stuff in memory that surely cannot be used anymore in the code and free up this memory. In the updated example, the intermediate results do not need to be kept in memory and can be garbace collected.</p> <h1 id="tip-3-chunking">Tip 3: chunking</h1> <p>Often, your operations do not require knowledge about <em>all</em> data at all times. Check out the following code:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">rioxarray</span> <span class="k">as</span> <span class="n">rxr</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">rxr</span><span class="p">.</span><span class="nf">open_rasterio</span><span class="p">(</span><span class="sh">'</span><span class="s">myfile.tif</span><span class="sh">'</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span> <span class="o">*</span> <span class="mi">2</span></code></pre></figure> <p>The operation at one entry of the dataset needs no information from the rest of the dataset, right? So what we can do here is apply the operation on <strong>chunks</strong> instead of on the whole dataset at once. For that we can simply load the file in chunks like so:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">rioxarray</span> <span class="k">as</span> <span class="n">rxr</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">rxr</span><span class="p">.</span><span class="nf">open_rasterio</span><span class="p">(</span><span class="sh">'</span><span class="s">myfile.tif</span><span class="sh">'</span><span class="p">,</span> <span class="n">chunks</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span> <span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1000</span><span class="p">})</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span> <span class="o">*</span> <span class="mi">2</span></code></pre></figure> <p>I profiled these two code snippets using a roughly 5GB large random tif file, and the differences are tremendous! Without chunking, the script took 7 seconds and needed 13 GB of RAM. Adding chunking reduced the runtime to 1 second, and the memory usage to 200MB! The following image is the output of the <code class="language-plaintext highlighter-rouge">mprof</code> profiler. You can barely see the chunked run, it’s the blue line in the bottom left!</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/memory_comparison_chunking-480.webp 480w,/assets/img/blogpostimgs/memory_comparison_chunking-800.webp 800w,/assets/img/blogpostimgs/memory_comparison_chunking-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/memory_comparison_chunking.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Using chunking can tremendously reduce resource consumption of scripts. </div> <p>Other libraries have their own chunking options. So the tip here is to simply check whether there are options for chunking in the library that you’re using!</p> <h1 id="tip-4-data-types">Tip 4: Data types</h1> <p>An absolutely critical and extremely powerful aspect of memory efficiency is the way that the data is actually stored in memory. To understand this better, we need to dive a bit deeper into how that actually happens in the first place.</p> <h2 id="introduction-to-data-types">Introduction to data types</h2> <p>Depending on the programming language you use, you might be more or less familiar with data types. In Java or C++, for instance, you always need to make explicit which data type a certain variable has:</p> <figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kt">double</span> <span class="n">floatingPointNumber</span> <span class="o">=</span> <span class="mf">1.333</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">integerNumber</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="kt">boolean</span> <span class="n">trueOrFalse</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">"hello"</span></code></pre></figure> <p>In those languages, you cannot assign anything to a variable that doesn’t adhere to the type:</p> <figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">text</span> <span class="o">=</span> <span class="mf">5.9</span><span class="o">;</span></code></pre></figure> <p>This will immediately cause an error because text is <code class="language-plaintext highlighter-rouge">String</code> but 5.9 is a <code class="language-plaintext highlighter-rouge">double</code> (floating point number with “double” precision). For some other situations, however, this works because the language immediately knows what’s supposed to happen:</p> <figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">floatingPointNumber</span> <span class="o">=</span> <span class="n">integerNumber</span><span class="o">;</span> <span class="c1">// automatically converts 5 to 5.0</span>
<span class="n">integerNumber</span> <span class="o">=</span> <span class="n">floatingPointNumber</span><span class="o">;</span> <span class="c1">// does not work and creates a compiler error</span></code></pre></figure> <p>But in many other languages, especially R and Python, this might not be obvious. In Python, for instance, you can happily assign anything to any variable:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">floatingPointNumber</span> <span class="o">=</span> <span class="mf">40.0</span>
<span class="n">floatingPointNumber</span> <span class="o">=</span> <span class="sh">'</span><span class="s">hello</span><span class="sh">'</span>
<span class="n">floatingPointNumber</span> <span class="o">=</span> <span class="bp">True</span></code></pre></figure> <p>Those languages will always doing their best in trying to understand what you’re trying to do, and you never really have to think about data types. But internally, every variable still has a data type and this is what we can look into when we have memory issues.</p> <h2 id="leveraging-data-types">Leveraging data types</h2> <p>So, even though you might not see it, all data is stored with some data type. And here is where a huge option for optimization lies. Let’s see first what these data types are.</p> <p>A classical number representation in programming is a 32bit <code class="language-plaintext highlighter-rouge">integer</code>. A variable of that type can hold every integer number between \(-2^{32}\) and \(2^{32}-1\). To allow for this large range, this variable needs 32 bits of storage, or 8 bytes. Let’s say your data array is 1000x1000 in size. This means, the raw data of that array without any other overhead is 1000x1000x8 = 8.000.000 bytes or ~7.6 Megabytes. That’s not a problem, but in many scientific problems, we need to deal with arrays of sizes like 100.000 x 10.000, so that will be already <em>~7.6 Gigabytes</em>!</p> <p>But do you really need the full range of values? Maybe you know your values are maximally up to 100 or so. In that case, you could store your array with <code class="language-plaintext highlighter-rouge">int8</code> (range: -128 to 127). This only needs 8 bits, or 1 byte. Then, the 100.000 x 10.000 array will only require 100.000 x 10.000 x 1 / 1024^2 = ~950 Megabytes! We just saved 6.5 Gigabytes of memory!</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">100000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">))</span>

<span class="n">memory_usage_in_bytes</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">nbytes</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>

<span class="n">array_int8</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int8</span><span class="p">)</span>
<span class="n">converted_memory_usage_in_bytes</span> <span class="o">=</span> <span class="n">array_int8</span><span class="p">.</span><span class="n">nbytes</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">memory_usage_in_bytes</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">converted_memory_usage_in_bytes</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <p>The output of this will be the Megabytes that are needed to store these arrays: 7629.39 953.67, so we just saved over 6GB of RAM:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/memorytest-480.webp 480w,/assets/img/blogpostimgs/memorytest-800.webp 800w,/assets/img/blogpostimgs/memorytest-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/memorytest.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Running the code from above shows the much lower memory usage when using `int8` instead of the regular `int32` </div> <h1 id="tip-5-lazy-loading">Tip 5: Lazy loading</h1> <p>Many data science libraries offer the option of <strong>lazy loading</strong>. This means that the data is only read when it is actually needed, and not read in full into memory where it can really blow up.</p> <p>The following line, reading a ~3GB data file, recently completely blew up on my machine with 32GB RAM:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">xarray</span> <span class="k">as</span> <span class="n">xr</span>
<span class="n">tas</span> <span class="o">=</span> <span class="n">xr</span><span class="p">.</span><span class="nf">load_dataset</span><span class="p">(</span><span class="sh">'</span><span class="s">isimip_data/chelsa-w5e5_obsclim_tas_300arcsec_eu_daily_allyears_1979_2014_ncks.nc</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <p>In the end all I had to do was enable lazy loading, by simply replacing <code class="language-plaintext highlighter-rouge">load_dataset</code> with <code class="language-plaintext highlighter-rouge">open_dataset</code> and let the library do its magic:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">tas</span> <span class="o">=</span> <span class="n">xr</span><span class="p">.</span><span class="nf">open_dataset</span><span class="p">(</span><span class="sh">'</span><span class="s">isimip_data/chelsa-w5e5_obsclim_tas_300arcsec_eu_daily_allyears_1979_2014_ncks.nc</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <p>My entire code then ran without needing more than 6GB of memory.</p> <p>Depending on your code and the libraries you use, there might be numerous ways in applying lazy loading. When you used some profiling to understand where things are blowing up, you can probably figure out whether this could help. In that case, you can simply ask ChatGPT explicitly how to make use of lazy loading within your code. However, it really depends on your code whether lazy loading will help you.</p> <h1 id="conclusion">Conclusion</h1> <p>Memory consumption is a complex issue. And today we often luckily have large enough machines to deal with the large data we work on. But still, we sometimes exceed this capacity. Hopefully the tips I mentioned can help you deal with this. To recap, here are things you need to do when you apparently have a memory issue in your program:</p> <ol> <li>Check where the issue is and how big it is by checking your computer’s memory usage and profiling the code</li> <li>Are there variables you can optimize away to minimize the stuff that is held in memory?</li> <li>Can you leverage what you know about the data? If you’re sure about the maximum value of a dataset, maybe specifying a small data type explicitly reduces the memory cost.</li> <li>Make use of chunking and lazy loading options.</li> </ol> <p>Hopefully this was helpful to you. If you would like to learn more about coding practices in science, please consider booking a course with me, <a href="/courses/">click here for more info</a></p>]]></content><author><name></name></author><category term="code"/><category term="code"/><summary type="html"><![CDATA[When dealing with large data, memory (RAM) is often an issue.]]></summary></entry><entry><title type="html">Writing good code 2 - the SOLID principles applied to scientific code</title><link href="https://k-gregor.github.io/blog/2024/good-code-2-solid-principles/" rel="alternate" type="text/html" title="Writing good code 2 - the SOLID principles applied to scientific code"/><published>2024-10-27T15:09:00+00:00</published><updated>2024-10-27T15:09:00+00:00</updated><id>https://k-gregor.github.io/blog/2024/good-code-2-solid-principles</id><content type="html" xml:base="https://k-gregor.github.io/blog/2024/good-code-2-solid-principles/"><![CDATA[<p>In my post about <a href="/blog/2024/good-code-1-proper-naming-in-scientific-code/">variable naming and function extraction</a> I tried to convey how simple it is to make code readable and understandable.</p> <p>Tthere are a few other software development paradigms and principles that aid in creating such understandable, but also maintainable, extendable, and testable code. Five core principles for object-oriented software design have been developed by Robert Martin and later termed by the acronym SOLID by Michael Feathers (Martin, 2000). These principles have been developed for agile software development where adaptations and new features have to be implemented in fast iterations. This is obviously not usually the case in scientific modeling. Nevertheless, they can be helpful also for scientific code because they help in making code more testable and maintainable, which is why I want to explain them here.</p> <h1 id="the-solid-principles-of-object-oriented-programming-languages">The SOLID principles of object-oriented programming languages</h1> <p>The five SOLID principles are the following:</p> <ol> <li>The <strong>S</strong>ingle responsibilty principle states that classes (or functions) should be responsible for one thing only. This allows clear distinction of what is done where.</li> <li>The <strong>O</strong>pen-closed principle constitutes that code should be open for extension (allowing new functionality) but closed to modification (the extension should not require modification of the existing code).</li> <li>The <strong>L</strong>iskov substitution principle formalizes proper usage of inheritance.</li> <li>The <strong>I</strong>nterface segregation principle defines that the interfaces between modules should be kept as small as possible to restrict unnecessary access, thereby limiting room for erronous behavior.</li> <li>The <strong>D</strong>ependency inversion principle states how to deal with modules depending on one another and how to handle dependencies for better testability.</li> </ol> <p>By the way, although they were developed for object-oriented programming, the SOLID principles are also applicable (in adapted form) to functional programming (see, e.g., Kocik (2022)).</p> <p>Here they are in more detail:</p> <h2 id="1-single-responsibility-principle">1. Single responsibility principle</h2> <p>Extracting well-named functions can be helpful to make code more understandable, maintainable, and testable. This is achieved best when these functions are not overloaded but ideally do <strong>one particular thing only</strong>. This idea is called the <em>single responsibility principle</em>. The principle was introduced for classes but holds for functions as well. A class that computes the radiation budget at the Earth’s surface should not also compute the water budget. These two things are of course heavily related, but should be split up if possible.</p> <p>Look at the following example code snippet adapted from the dynamic vegetation model LPJ-GUESS (Smith et al., 2014). All logic is divided into multiple functions that get called one after the other. This is a good example of the single responsibility principle where each function deals with one thing.</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="kt">void</span> <span class="nf">simulateDay</span><span class="p">()</span> <span class="p">{</span>
<span class="p">...</span>
<span class="n">leafPhenology</span><span class="p">(</span><span class="n">patch</span><span class="p">,</span> <span class="n">climate</span><span class="p">);</span>
<span class="n">interception</span><span class="p">(</span><span class="n">patch</span><span class="p">,</span> <span class="n">climate</span><span class="p">);</span>
<span class="n">initialInfiltration</span><span class="p">(</span><span class="n">patch</span><span class="p">,</span> <span class="n">climate</span><span class="p">);</span>
<span class="n">canopyGasExchange</span><span class="p">(</span><span class="n">patch</span><span class="p">,</span> <span class="n">climate</span><span class="p">);</span>
<span class="n">irrigation</span><span class="p">(</span><span class="n">patch</span><span class="p">);</span>
<span class="n">soilwater</span><span class="p">(</span><span class="n">patch</span><span class="p">,</span> <span class="n">climate</span><span class="p">);</span>
<span class="p">...</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> This example code adapted from the dynamic vegetation model LPJ-GUESS nicely extracts code into different functions with clear names that are responsible for one thing. </div> <h2 id="2-open-closed-principle">2. Open-closed principle</h2> <p>Code should be open for extension, but closed for modification. This means, that the class itself should be able to deal with new requirements without changing anything within that class.</p> <p>Consider the following example adapted from LPJ-GUESS computing leaf phenology. The code is technically not open for extension. If a new plant lifeform is added, we need to modify this code and add another <code class="language-plaintext highlighter-rouge">if</code>.</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="kt">void</span> <span class="nf">leafPhenology</span><span class="p">(</span><span class="n">Plant</span> <span class="n">plant</span><span class="p">,</span> <span class="n">Climate</span> <span class="n">climate</span><span class="p">){</span>
<span class="c1">// ...</span>
<span class="kt">double</span> <span class="n">phenology</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">plant</span><span class="p">.</span><span class="n">lifeform</span> <span class="o">==</span> <span class="n">TREE</span><span class="p">){</span>
<span class="n">phenology</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="p">(</span><span class="n">climate</span><span class="p">.</span><span class="n">gdd5</span> <span class="o">-</span> <span class="n">plant</span><span class="p">.</span><span class="n">gdd0</span><span class="p">[</span><span class="n">climate</span><span class="p">.</span><span class="n">chilldays</span><span class="p">])</span> <span class="o">/</span> <span class="n">pft</span><span class="p">.</span><span class="n">phengdd5ramp</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">plant</span><span class="p">.</span><span class="n">lifeform</span> <span class="o">==</span> <span class="n">GRASS</span><span class="p">)</span> <span class="p">{</span>  
 <span class="n">phenology</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">climate</span><span class="p">.</span><span class="n">gdd5</span> <span class="o">/</span> <span class="n">plant</span><span class="p">.</span><span class="n">phengdd5ramp</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// ...</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption">This code violates the open-closed principle.</div> <p>Here, it could be better to make use of inheritance in object-oriented languages. One could introduce classes <code class="language-plaintext highlighter-rouge">Tree</code> and <code class="language-plaintext highlighter-rouge">Grass</code> that implement an interface (or extend an abstract class) <code class="language-plaintext highlighter-rouge">Plant</code> that has a method <code class="language-plaintext highlighter-rouge">phenology()</code>. Then, we can call <code class="language-plaintext highlighter-rouge">plant.phenology()</code> directly without having to check its type again. And adding a new type of plant would not change any code in the adapted snippet below. The new plant would implement their own <code class="language-plaintext highlighter-rouge">phenology()</code> function:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="kt">void</span> <span class="nf">leafPhenology</span><span class="p">(</span><span class="n">Plant</span> <span class="n">plant</span><span class="p">,</span> <span class="n">Climate</span> <span class="n">climate</span><span class="p">){</span>
<span class="c1">// ...</span>
<span class="kt">double</span> <span class="n">phenology</span> <span class="o">=</span> <span class="n">plant</span><span class="p">.</span><span class="n">phenology</span><span class="p">(</span><span class="n">climate</span><span class="p">);</span>
<span class="c1">// ...</span>
<span class="p">}</span>

<span class="k">public</span> <span class="n">interface</span> <span class="n">Plant</span> <span class="p">{</span>
<span class="k">public</span> <span class="kt">double</span> <span class="n">phenology</span><span class="p">(</span><span class="n">Climate</span> <span class="n">climate</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Tree</span> <span class="n">extends</span> <span class="n">Plant</span> <span class="p">{</span>
<span class="k">public</span> <span class="kt">double</span> <span class="n">phenology</span><span class="p">(</span><span class="n">Climate</span> <span class="n">climate</span><span class="p">){</span>
<span class="k">return</span> <span class="n">min</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="p">(</span><span class="n">climate</span><span class="p">.</span><span class="n">gdd5</span> <span class="o">-</span> <span class="n">gdd0</span><span class="p">[</span><span class="n">climate</span><span class="p">.</span><span class="n">chilldays</span><span class="p">])</span> <span class="o">/</span> <span class="n">phengdd5ramp</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Grass</span> <span class="n">extends</span> <span class="n">Plant</span> <span class="p">{</span>
<span class="k">public</span> <span class="kt">double</span> <span class="n">phenology</span><span class="p">(</span><span class="n">Climate</span> <span class="n">climate</span><span class="p">){</span>
<span class="k">return</span> <span class="n">min</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">climate</span><span class="p">.</span><span class="n">gdd5</span> <span class="o">/</span> <span class="n">phengdd5ramp</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> This example is open for extension and closed for modification. The function `leafPhenology` will not need to be adapted if a new type of plant is introduced.</div> <p>This way of organizing the code is more maintainable, because we do not need to touch <code class="language-plaintext highlighter-rouge">leafPhenology</code> again if we want to change the behavior of <code class="language-plaintext highlighter-rouge">Tree</code>s or <code class="language-plaintext highlighter-rouge">Grass</code>es or add a new type of <code class="language-plaintext highlighter-rouge">Plant</code>. It needs to be noted, however, that for a single such situation it is probably not worth designing a new class hierarchy. Creating a class hierarchy needs to be well thought out, because it will be hard to change later. However, if you find yourself having to write similar if-else-statements around the model code, creating a class abstraction is probably sensible.</p> <h2 id="3-liskov-substitution-principle">3. Liskov substitution principle</h2> <p>A benefit of object-oriented programming is the concept of inheritance, where a subclass is derived from a superclass to extend the behavior of that superclass. We have seen this above already in the Open-close principle.</p> <p>The introduced <code class="language-plaintext highlighter-rouge">Plant</code> interface (it could also be a class) will have sub-types like <code class="language-plaintext highlighter-rouge">Tree</code>, which will in turn have other subtypes, for instance <code class="language-plaintext highlighter-rouge">NeedleleavedTree</code> and <code class="language-plaintext highlighter-rouge">BroadleavedTree</code>. In this regard, the Liskov substitution principle is the principle guaranteeing that no inconsistent behavior happens when creating such a hierarchy. It states that if class A is a subtype of B, we should be able to use objects of type A and B interchangeably without breaking the behavior of the model.</p> <p>Basically this boils down to designing a proper inheritance hierarchy. An example violating this rule is found below.</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="k">class</span> <span class="nc">BroadleavedTree</span> <span class="p">{</span>
<span class="kt">void</span> <span class="n">leafOut</span><span class="p">(){</span>
<span class="c1">// grow broad leaves</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">senescence</span><span class="p">(){</span>
<span class="c1">// drop leaves in autumn</span>
<span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">CommonOak</span> <span class="n">extends</span> <span class="n">BroadleavedTree</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">HolmOak</span> <span class="n">extends</span> <span class="n">BroadleavedTree</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> The problem here is that unlike most broad-leaved trees, a holm oak actually is also an evergreen tree and does not drop its leaves. The class hierarchy is therefore not ideal. </div> <p>In general it is simply important to keep in mind that class types need to be interchangeable when designing the hierarchy (e.g., a class <code class="language-plaintext highlighter-rouge">Bird</code> would probably have a method <code class="language-plaintext highlighter-rouge">fly()</code>, but then there are birds that don’t fly). There are numerous ways to fix a violation of the principle, for instance redesigning the class hierarchy or not using inheritance where we don’t need to (this is also called <strong>composition over inheritance</strong>).</p> <p>In the given example, the method <code class="language-plaintext highlighter-rouge">senescence()</code> could be extracted from the class <code class="language-plaintext highlighter-rouge">BroadleavedTree</code> into an interface <code class="language-plaintext highlighter-rouge">Summergreen</code>, because this method is not really tied to the characteristic of a tree having broad leaves. This would allow creating various broad-leaved trees that can drop their leaves or not, depending on whether the interface is implemented or not, like so:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="k">class</span> <span class="nc">BroadleavedTree</span> <span class="p">{</span>
<span class="kt">void</span> <span class="n">leafOut</span><span class="p">(){</span>
<span class="c1">// grow broad leaves</span>
<span class="p">}</span>
<span class="p">}</span>

<span class="n">interface</span> <span class="n">Summergreen</span> <span class="p">{</span>
<span class="kt">void</span> <span class="n">senescence</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">CommonOak</span> <span class="n">extends</span> <span class="n">BroadleavedTree</span> <span class="n">implements</span> <span class="n">Summergreen</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="k">class</span> <span class="nc">HolmOak</span> <span class="n">extends</span> <span class="n">BroadleavedTree</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> Extracting the senescence function into an interface makes the class hierarchy correct again.. </div> <h2 id="4-interface-segregation">4. Interface segregation</h2> <p>We’ve seen above already how interfaces can be helpful to hide away logic from other parts of the code (see the example of the Open-closed principle).</p> <p>There is one additional golden rule about creating such interfaeces: Instead of creating one large interface it is advisable to create multiple small ones. Then at another point in the software, only the ``small’’ interface is addressed, providing only what is relevant at this point. Note that interfaces do not exist in all programming languages, but they can often be emulated by other features of those languages.</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="k">public</span> <span class="n">interface</span> <span class="n">Plant</span><span class="p">{</span>
<span class="n">takeUpWater</span><span class="p">();</span>
<span class="n">phenology</span><span class="p">();</span>
<span class="n">doPhotosynthesis</span><span class="p">();</span>
<span class="n">respire</span><span class="p">();</span>
<span class="n">grow</span><span class="p">();</span>
<span class="n">die</span><span class="p">();</span>
<span class="n">harvest</span><span class="p">();</span>
<span class="n">sow</span><span class="p">();</span>
<span class="n">irrigate</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Cropland</span> <span class="p">{</span>
<span class="k">public</span> <span class="kt">void</span> <span class="n">prepareField</span><span class="p">(</span><span class="n">Plant</span> <span class="n">plant</span><span class="p">){</span>
<span class="c1">// calling functions like plant.doPhotosynthesis() or plant.respire()</span>
<span class="c1">// would be possible here. But is this reasonable?</span>
<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> Example of a potentially too large interface. The `Cropland` class should not be able to deal with low-level aspects of a `Plant`. </div> <p>Every part of the code receiving a <code class="language-plaintext highlighter-rouge">Plant</code> now can do anything with that object. According to <em>interface segregation</em>, we should hide unneeded details. In this example, it would make sense to extract at least one other interface:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="k">public</span> <span class="n">interface</span> <span class="n">Plant</span><span class="p">{</span>
<span class="n">takeUpWater</span><span class="p">();</span>
<span class="n">phenology</span><span class="p">();</span>
<span class="n">doPhotosynthesis</span><span class="p">();</span>
<span class="n">respire</span><span class="p">();</span>
<span class="n">grow</span><span class="p">();</span>
<span class="n">die</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="n">interface</span> <span class="n">ManageablePlant</span><span class="p">{</span>
<span class="n">harvest</span><span class="p">();</span>
<span class="n">sow</span><span class="p">();</span>
<span class="n">irrigate</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Cropland</span> <span class="p">{</span>
<span class="k">public</span> <span class="kt">void</span> <span class="n">prepareField</span><span class="p">(</span><span class="n">ManageablePlant</span> <span class="n">plant</span><span class="p">){</span>
<span class="c1">// plant.doPhotosynthesis() or plant.respire() can not be called here</span>
<span class="c1">// only methods of ManageablePlant (i.e., methods relevant to land use) can be</span>
<span class="c1">// called here, e.g., plant.sow() or plant.harvest()</span>
<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> An example of a segregation of the interfaces of the previous code snippet. In a land use component, only the functions of `ManageablePlant` should be visible. </div> <p>In a land use component of an earth system model, we then only need to pass the <code class="language-plaintext highlighter-rouge">ManageablePlant</code> and we can be sure that only the functions of that interface are called. The land use component will not be able to mess with other aspects which it is not responsible for, because these are hidden. For instance, <code class="language-plaintext highlighter-rouge">doPhotosynthesis</code> should probably not be called from any land use parts of the model and is therefore not part of the interface <code class="language-plaintext highlighter-rouge">ManageablePlant</code>.</p> <p>In a programming language without interfaces, similar results may be achieved through other means, for instance virtual methods and abstract classes.</p> <h2 id="5-dependency-inversion">5. Dependency inversion</h2> <p>This principle aims at decoupling modules from one another. High level logic should not depend on a particular implementation at a low level. In regular software this is essential to switch out modules easily, e.g. replace a data source.</p> <p>This is probably not a crucial thing in scientific code and models. However, there is one critical benefit of this principle: It makes the code more testable, because we can plug in and test things easily because you can pass things directly. A negative example is shown in the following code snippet. The <code class="language-plaintext highlighter-rouge">simulateClimateProjection</code>-function is hard to test, because we cannot easily test what happens under various climates.</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">class</span> <span class="nc">Gridcell</span><span class="p">{</span>
<span class="k">private</span> <span class="n">Climate</span> <span class="n">climate</span><span class="p">;</span>
<span class="k">public</span> <span class="n">Gridcell</span><span class="p">(){</span>
<span class="k">this</span><span class="p">.</span><span class="n">climate</span> <span class="o">=</span> <span class="n">readClimateFromFile</span><span class="p">();</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">simulateClimateProjection</span><span class="p">(){</span>
<span class="kt">double</span> <span class="n">temperature</span> <span class="o">=</span> <span class="n">climate</span><span class="p">.</span><span class="n">getTemperature</span><span class="p">();</span>
<span class="p">...</span>
<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> This code violates the dependency inversion principle. The high level class `Gridcell` depends on the implementation of `Climate`. </div> <p>An improved implementation is achieved by passing the climate through the constructor. In a testing environment, various climate objects can be created and passed.</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">class</span> <span class="nc">Gridcell</span><span class="p">{</span>
<span class="k">private</span> <span class="n">Climate</span> <span class="n">climate</span><span class="p">;</span>
<span class="k">public</span> <span class="n">Gridcell</span><span class="p">(</span><span class="n">Climate</span> <span class="n">climate</span><span class="p">){</span>
<span class="k">this</span><span class="p">.</span><span class="n">climate</span> <span class="o">=</span> <span class="n">climate</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">simulateClimateProjection</span><span class="p">(){</span>
<span class="kt">double</span> <span class="n">temperature</span> <span class="o">=</span> <span class="n">climate</span><span class="p">.</span><span class="n">getTemperature</span><span class="p">();</span>
<span class="p">...</span>
<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> In this example, the dependency of `Gridcell` on `Climate` is being injected. `Gridcell` does not have to create the `Climate` itself because it is *injected*. This makes it easier to test: In a unit test, we can pass different climates and call `simulateClimateProjection()`. </div> <p>When testing the code, we can now simply insert our own <code class="language-plaintext highlighter-rouge">Climate</code> when creating a <code class="language-plaintext highlighter-rouge">Gridcell</code> and easily test what happens when we run <code class="language-plaintext highlighter-rouge">simulateClimateProjection</code> after having passed various climates.</p> <h1 id="conclusion">Conclusion</h1> <p>For a scientist, this was probably quite the deep-dive into topics of software engineering. However, I believe that one needs to simple remember the gist of these SOLID principles:</p> <ol> <li>Code portions should have one responsibility and not do hundred things</li> <li>Code should be designed that modifications or extensions need minimal adaptation of code</li> <li>Code that can take different arguments should work for all types of arguments that they allow</li> <li>Internal logic that can be hidden should be hidden</li> <li>Code at a high level should be designed in a way that it is independent from implementations at low levels.</li> </ol> <p>All this also makes code more understandable, maintainable, and testable.</p> <h1 id="references">References</h1> <ul> <li>Kocik, M. (2022). SOLID principles in Functional Programming. <a href="https://medium.com/@mkocik/solid-principles-in-functional-programming-b9b83aeddf80">https://medium.com/@mkocik/solid-principles-in-functional-programming-b9b83aeddf80</a></li> <li>Martin, R. C. (2000). Design Principles and Design Patterns. Object Mentor. <a href="http://labs.cs.upt.ro/labs/ip2/html/lectures/2/res/Martin-PrinciplesAndPatterns.PDF">http://labs.cs.upt.ro/labs/ip2/html/lectures/2/res/Martin-PrinciplesAndPatterns.PDF</a></li> <li>Smith, B., Wårlind, D., Arneth, A., Hickler, T., Leadley, P., Siltberg, J., &amp; Zaehle, S. (2014). Implications of incorporating N cycling and N limitations on primary production in an individual-based dynamic vegetation model. Biogeosciences, 11(7), 2027–2054. <a href="https://doi.org/10.5194/bg-11-2027-2014">https://doi.org/10.5194/bg-11-2027-2014</a></li> </ul>]]></content><author><name></name></author><category term="code"/><category term="code"/><summary type="html"><![CDATA[A discussion of the most important paradigms of professional software development and how they can help us write good code in science.]]></summary></entry><entry><title type="html">Writing good code 1 - Naming, comments, functions, and the DRY principle</title><link href="https://k-gregor.github.io/blog/2024/good-code-1-proper-naming-in-scientific-code/" rel="alternate" type="text/html" title="Writing good code 1 - Naming, comments, functions, and the DRY principle"/><published>2024-10-05T15:09:00+00:00</published><updated>2024-10-05T15:09:00+00:00</updated><id>https://k-gregor.github.io/blog/2024/good-code-1-proper-naming-in-scientific-code</id><content type="html" xml:base="https://k-gregor.github.io/blog/2024/good-code-1-proper-naming-in-scientific-code/"><![CDATA[<p>Scientists are not software developers, yet we often do write software. This could include simple data pre-processing scripts, complex data analyses, or full scientific models. Here I want to highlight some critical aspects of professional software development and how they could be applied in scientific programming.</p> <h2 id="proper-naming">Proper Naming</h2> <p>A trivial yet essential aspect of understandable code is proper naming. In scientific code, one often comes across variables called <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">xx</code>, or <code class="language-plaintext highlighter-rouge">ys</code>. But there is no cost in using descriptive names such as <code class="language-plaintext highlighter-rouge">years_since_2000</code> or <code class="language-plaintext highlighter-rouge">mean_surface_temperatures</code> which immediately indicate what they contain. Exceptions are known formulas, where the variable names should be as in the formula. For instance, \(E=mc^2\) does not need to be written as <code class="language-plaintext highlighter-rouge">energy = mass * light_speed * light_speed</code>.</p> <p>Proper variable naming is the number one step to making your code readable and understandable. Check out the following code. It is simple, yet you have no idea what is going on there:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">a</span> <span class="o">=</span> <span class="mf">0.02</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">xx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">yy</span> <span class="o">=</span> <span class="n">b</span>\<span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">a</span><span class="p">)</span>\<span class="o">*</span>\<span class="o">*</span><span class="n">xx</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span> <span class="n">yy</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Comments might make this code more understandable. But still, if we use the variable <code class="language-plaintext highlighter-rouge">a</code> at another point in the code, we’d have no idea what we’re dealing with and have to go back to the declaration to find out:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="n">a</span> <span class="o">=</span> <span class="mf">0.02</span> <span class="c1"># interest rate
</span><span class="n">b</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># initial investment
</span><span class="n">xx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="c1"># years
</span><span class="n">yy</span> <span class="o">=</span> <span class="n">b</span>\<span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">a</span><span class="p">)</span>\<span class="o">*</span>\<span class="o">*</span><span class="n">xx</span> <span class="c1"># money value after x years
</span><span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span> <span class="n">yy</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>With proper variable names, the code is easy to understand:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="n">interest_rate</span> <span class="o">=</span> <span class="mf">0.02</span>
<span class="n">initial_investment</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">time_years</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">all_that_money_in_my_bank_account</span> <span class="o">=</span> <span class="n">initial_investment</span>\<span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">interest_rate</span><span class="p">)</span>\<span class="o">*</span>\<span class="o">*</span><span class="n">time_years</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">time_years</span><span class="p">,</span> <span class="n">all_that_money_in_my_bank_account</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="avoid-magic-numbers">Avoid magic numbers</h2> <p>Another trivial, yet often ignored, rule is to avoid “magic numbers”. These are numbers in the code that are not explained. For instance, what is going on here?</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">time</span> <span class="o">=</span> <span class="n">time</span> <span class="n">_</span> <span class="mi">86400</span>
<span class="n">emissions</span> <span class="o">=</span> <span class="n">emissions</span> <span class="n">_</span> <span class="mf">44.01</span><span class="o">/</span><span class="mf">12.011</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> It is hard to understand what this code is doing. What to these magic numbers like 44.01 or 86400 mean? </div> <p>Instead of writing numbers directly it is much clearer to store the numbers in understandable constants like so:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="n">SECONDS_PER_DAY</span> <span class="o">=</span> <span class="mi">60</span> <span class="n">_</span> <span class="mi">60</span> <span class="n">_</span> <span class="mi">24</span>
<span class="n">time_days</span> <span class="o">=</span> <span class="n">time_seconds</span> \<span class="o">*</span> <span class="n">SECONDS_PER_DAY</span>

<span class="n">CONVERSION_C_TO_CO2</span> <span class="o">=</span> <span class="mf">44.01</span><span class="o">/</span><span class="mf">12.011</span>
<span class="n">co2_emissions</span> <span class="o">=</span> <span class="n">c_emissions</span> \<span class="o">*</span> <span class="n">CONVERSION_C_TO_CO2</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> The code is much clearer when magic numbers are extracted into well-named constants. </div> <h2 id="perks-and-pitfalls-of-comments">Perks and Pitfalls of comments</h2> <p>Comments are helpful to explain code, as was also shown above. However, it often happens that comments are outdated because people forget to adapt them when code is changed. Therefore, proper naming should make the code the first means of documentation and render additional comments unnecessary.</p> <p>In scientific models, comments can be used to add citations as to where a formula comes from. Furthermore, comments can be vital in explaining complex parts of the code. However, it needs to be kept in mind that comments are maintained with the rest of the code to avoid inconsistencies between the two that would lead to confusion. At the end of the article, there will be an example containing useful commenting.</p> <p>A final note is that code should never be used <strong>“out-commented”</strong> as this will only lead to confusion why this code is currently not in use. Version control (like <code class="language-plaintext highlighter-rouge">git</code> or <code class="language-plaintext highlighter-rouge">svn</code>) allows deleting the code with a commit message explaining why it was deleted. If it happens that the code is needed again, this commit can be reverted.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">person_list</span><span class="p">:</span>
<span class="n">person</span><span class="p">.</span><span class="nf">calculate_something</span><span class="p">()</span>

      <span class="c1"># person.do_the_thing()
</span>      <span class="c1"># person.money = 1000
</span>
      <span class="n">person</span><span class="p">.</span><span class="n">money</span> <span class="o">=</span> <span class="mi">500</span>
      <span class="n">person</span><span class="p">.</span><span class="nf">do_other_thing</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> My buddy at my old job would call this a "Nonononono!". Other scientists (or you in 1 year!) seeing this code will not understand why we don't to **the thing** anymore, and why the `person` only gets 500 moneys now. Delete the code, write a proper commit message, the change will be easy to understand. </div> <h2 id="the-dry-principle-dont-repeat-yourself">The DRY Principle (Don’t Repeat Yourself)</h2> <p>Repetition in code is not only a source of clutter, but also a critical source of errors. If the same piece of code exists in multiple places of the model and needs changing, chances are that one forgets to change it in all places. Therefore, such code should be extracted into well-named functions with well-named parameters that can be called from anywhere from the model. When the logic needs changing, we only need to change it in one place. This is especially important for other developers who might have to adapt that code. Other than you, they might now know that they need to do the same change in multiple places! Well-named functions also make the code easier to read, understand, and test. For instance we can easily write a test that checks whether the code from above does what it is supposed to, when this code is extracted into a nice function:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">calculate_bank_account_value</span><span class="p">(</span><span class="n">initial_investment</span><span class="p">,</span> <span class="n">interest_rate</span><span class="p">,</span> <span class="n">time_in_years</span><span class="p">):</span>
<span class="k">return</span> <span class="n">initial_investment</span>\<span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">interest_rate</span><span class="p">)</span>\<span class="o">*</span>\<span class="o">*</span><span class="n">time_in_years</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>In languages like Python you can even make use of the named function parameters to have a very understandable function call:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nf">calculate_bank_account_value</span><span class="p">(</span><span class="n">initial_investment</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">interest_rate</span><span class="o">=</span><span class="mf">0.02</span><span class="p">,</span> <span class="n">time_in_years</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Another benefit is that such functions are easily testable. We’ll have another post on that topic soon.</p> <p>In the case of data processing workflows, things might be a bit different. You might have similar workflows for similar data inputs and the obvious thing is to simply copy the code and adapt it as necessary instead of making it generic. If it is only used once it might also be too much effort to spend lots of time on refactoring it into reusable functions. Nonetheless, the DRY principle should always be kept in mind. With modern IDEs, extraction of methods is also not a time-consuming task and it helps clarify that the code does what it’s supposed to do. This will help when workflows have to be run again, for instance when things pop during the review process of a paper.</p> <p>Another point where the DRY principle holds in science is when sharing code. Often, someone has a script that they can email to you that will do the data processing you need to do. But this is obviously a way of repeating oneself. Now imagine that you find a bug in the script. How will it be made sure that everyone is informed about the fix? The blog post of Miles McBain (2024) discusses some ideas on how to tackle this.</p> <h2 id="a-holistic-example">A holistic example</h2> <p>Compare the two logically identical implementations of a zero-dimensional energy balance model below. The first one does the job, but it is quite hard to undestand what’s going on, isn’t it?</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="n">T</span> <span class="o">=</span> <span class="mi">200</span>

<span class="c1"># using heat capacity C [J/m^2/K] for 100m deep water as example
</span>
<span class="n">C</span> <span class="o">=</span> <span class="mf">4.0e+08</span>  
 <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.3</span>  
 <span class="n">epsilon_earth</span> <span class="o">=</span> <span class="mi">1</span>  
 <span class="n">epsilon_atm</span> <span class="o">=</span> <span class="mf">0.77</span>  
 <span class="n">sigma</span> <span class="o">=</span> <span class="mf">5.67E-8</span>

<span class="n">ghe</span> <span class="o">=</span> <span class="bp">False</span>

<span class="n">TT</span> <span class="o">=</span> <span class="p">[]</span>  
 <span class="n">tt</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>

      <span class="n">T_atm</span> <span class="o">=</span> <span class="n">T</span><span class="o">/</span><span class="mi">2</span><span class="o">**</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span>
      <span class="c1"># compute radiative imbalance by subtracting outgoing
</span>      <span class="c1"># longwave from incoming shortwave radiation
</span>      <span class="n">add</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1368</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">alpha</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span> <span class="o">-</span> <span class="n">epsilon_earth</span> <span class="o">*</span> <span class="n">sigma</span> <span class="o">*</span> <span class="nf">pow</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>

      <span class="k">if</span> <span class="n">ghe</span><span class="p">:</span> <span class="c1"># if greenhouse effect should be included
</span>        <span class="n">add</span> <span class="o">+=</span> <span class="n">epsilon_atm</span> <span class="o">*</span> <span class="n">sigma</span> <span class="o">*</span> <span class="nf">pow</span><span class="p">(</span><span class="n">T_atm</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>

      <span class="n">T</span> <span class="o">+=</span> <span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">365</span><span class="o">*</span><span class="n">add</span><span class="o">/</span><span class="n">C</span>
      <span class="n">T2</span> <span class="o">=</span> <span class="n">T</span> <span class="o">-</span> <span class="mf">273.15</span>

      <span class="n">tt</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
      <span class="n">TT</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">T2</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> This zero-dimensional energy balance model is hard to understand. Compare this with the same model with extracted functions and proper variable naming in the snippet below. </div> <p>In the second snippet, parts of the code are extracted into well-named functions, magic numbers are stored in constants and variable names are descriptive. Note also the <code class="language-plaintext highlighter-rouge">if</code> statement that previously required an explaining comment which is now replaced by a speaking variable making the explanation unnecessary. Someone reading the code will understand it much faster than the first version. These functions can not only be re-used in other parts of the model, they can also be easily tested. This contributes to better maintainability and error-avoidance.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre><span class="n">SIGMA</span> <span class="o">=</span> <span class="mf">5.67E-8</span> <span class="c1"># Stefan-Boltzmann constant [W/m2]  
</span> <span class="n">SOLAR_RADIATION</span> <span class="o">=</span> <span class="mi">1368</span> <span class="c1"># [W/m2]  
</span> <span class="n">SECONDS_PER_YEAR</span> <span class="o">=</span> <span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span>\<span class="o">*</span><span class="mi">365</span> <span class="c1"># [s]
</span>
<span class="n">T_surface_K</span> <span class="o">=</span> <span class="mi">200</span>

<span class="c1"># using heat capacity C [J/m^2/K] for 100m deep water as example
</span>
<span class="n">C</span> <span class="o">=</span> <span class="mf">4.0e+08</span>
<span class="n">albedo_earth</span> <span class="o">=</span> <span class="mf">0.3</span> <span class="c1"># unitless  
</span> <span class="n">epsilon_earth</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># emissivity, unitless  
</span> <span class="n">epsilon_atmosphere</span> <span class="o">=</span> <span class="mf">0.77</span> <span class="c1"># emissivity, unitless
</span>
<span class="n">include_greenhouse_effect</span> <span class="o">=</span> <span class="bp">True</span>

<span class="n">surface_temperatures</span> <span class="o">=</span> <span class="p">[]</span>  
 <span class="n">timesteps_years</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">incoming_shortwave_radiation</span><span class="p">(</span><span class="n">alpha</span><span class="p">):</span>  
 <span class="c1"># dividing by 4 to map from circle to sphere  
</span> <span class="k">return</span> <span class="n">SOLAR_RADIATION</span>\<span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">alpha</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span>

<span class="k">def</span> <span class="nf">outgoing_longwave_radiation</span><span class="p">(</span><span class="n">temperature_K</span><span class="p">,</span> <span class="n">epsilon</span><span class="p">):</span>  
 <span class="c1"># Boltzmann (1884)
</span><span class="k">return</span> <span class="n">epsilon</span> <span class="n">_</span> <span class="n">SIGMA</span> <span class="n">_</span> <span class="nf">pow</span><span class="p">(</span><span class="n">temperature_K</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>

<span class="c1"># See model description paper section 1.2 for details
</span>
<span class="k">def</span> <span class="nf">compute_atmospheric_temperature</span><span class="p">(</span><span class="n">surface_temperature</span><span class="p">):</span>  
 <span class="k">return</span> <span class="n">surface_temperature</span><span class="o">/</span><span class="mi">2</span>\<span class="o">*</span>\<span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">convert_kelvin_to_celsius</span><span class="p">(</span><span class="n">temp_K</span><span class="p">):</span>  
 <span class="k">return</span> <span class="n">temp_K</span> <span class="o">-</span> <span class="mf">273.15</span>

<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>

      <span class="n">radiative_imbalance_surface</span> <span class="o">=</span> <span class="nf">incoming_shortwave_radiation</span><span class="p">(</span><span class="n">albedo_earth</span><span class="p">)</span>
                              <span class="o">-</span> <span class="nf">outgoing_longwave_radiation</span><span class="p">(</span><span class="n">T_surface_K</span><span class="p">,</span> <span class="n">epsilon_earth</span><span class="p">)</span>

      <span class="k">if</span> <span class="n">include_greenhouse_effect</span><span class="p">:</span>
          <span class="n">reflected_longwave_radiation</span> <span class="o">=</span> <span class="nf">outgoing_longwave_radiation</span><span class="p">(</span>
            <span class="nf">compute_atmospheric_temperature</span><span class="p">(</span><span class="n">T_surface_K</span><span class="p">),</span> <span class="n">epsilon_atmosphere</span><span class="p">)</span>
          <span class="n">radiative_imbalance_surface</span> <span class="o">+=</span> <span class="n">reflected_longwave_radiation</span>

      <span class="n">T_surface_K</span> <span class="o">+=</span> <span class="n">SECONDS_PER_YEAR</span> <span class="o">*</span> <span class="n">radiative_imbalance_surface</span> <span class="o">/</span> <span class="n">C</span>

      <span class="n">timesteps_years</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
      <span class="n">surface_temperatures</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">convert_kelvin_to_celsius</span><span class="p">(</span><span class="n">T_surface_K</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></figure> <div class="caption"> This is the same model as in the code snippet above. However, upon first look it is easily understandable what is happening in the model. Note that I decided to not extract `273.15` into a constant, simply because the function name already makes it clear what it happening. This code example was created building on the work of multiple online resources (Boergel, 2024; Mann &amp; Gaudet, 2024; Rose &amp; Scott-Brown, 2024). </div> <h1 id="conclusion">Conclusion</h1> <p>I hope this post, and especially the final example, could show you that it is quite simple to make code easily understandable. The little effort it takes will definitely be worth it, because it will save a lot of time when you or someone else has to revisit your code.</p> <p>I believe that this still remaind valid in times of chatGPT and other code generation tools. Having the code well-readable and broken down into well-defined functions will help you ensure that the code is actually logically correct, and easily maintainable.</p> <h1 id="references">References</h1> <ul> <li>Boergel, F. (2024). Climate of the ocean. <a href="https://florianboergel.github.io/climateoftheocean">https://florianboergel.github.io/climateoftheocean</a></li> <li>Mann, M., &amp; Gaudet, B. (2024). Meteo 469: From Meteorology to Mitigation: Understanding Global Warming. <a href="https://www.e-education.psu.edu/meteo469/">https://www.e-education.psu.edu/meteo469/</a></li> <li>McBain, M. (2024). Before I Sleep: Patterns and anti-patterns of data analysis reuse. <a href="https://milesmcbain.com/posts/data-analysis-reuse/">https://milesmcbain.com/posts/data-analysis-reuse/</a></li> <li>Rose, B. E. J., &amp; Scott-Brown, J. (2024). The Climate Laboratory. <a href="https://doi.org/10.5281/zenodo.10552644">https://doi.org/10.5281/zenodo.10552644</a></li> </ul>]]></content><author><name></name></author><category term="code"/><category term="code"/><summary type="html"><![CDATA[Some crucial tips on how to create readable and testable code]]></summary></entry><entry><title type="html">9 life hacks for a successful PhD (or other knowledge work)</title><link href="https://k-gregor.github.io/blog/2024/life-hacks-for-a-successful-phd/" rel="alternate" type="text/html" title="9 life hacks for a successful PhD (or other knowledge work)"/><published>2024-08-08T15:09:00+00:00</published><updated>2024-08-08T15:09:00+00:00</updated><id>https://k-gregor.github.io/blog/2024/life-hacks-for-a-successful-phd</id><content type="html" xml:base="https://k-gregor.github.io/blog/2024/life-hacks-for-a-successful-phd/"><![CDATA[<p>Doing a PhD is not easy and there will be many times where you just want to quit. We’ve all been there. This makes it extremely important to make the process as easy and straightforward for yourself as possible. Here, I collected 9 hacks (I think they are more than just tips) that really helped me succeed at my PhD and that you might not have thought about. These will also be helpful for any other type of “brain work” like doing a Postdoc or working in the software industry. Let’s dive right in!</p> <h1 id="hack-1---get-some-really-large-hard-drives">Hack 1 - Get some really large hard drives</h1> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/harddrive-480.webp 480w,/assets/img/blogpostimgs/harddrive-800.webp 800w,/assets/img/blogpostimgs/harddrive-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/harddrive.jpg" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> SSD hard drives are tiny, cheap, and can store huge amounts of data. Image by Thiago Japyassu from pexels.com </div> <p>During your PhD, you will need to store loads of data and you can absolutely not risk loosing any data. Data loss often occurs when you quickly need to free up space in order to store a new dataset. Do yourself a favor and free yourself from this risk (and the time it needs to figure out what data you can remove to make space) by getting a large hard drive for your laptop. Large and fast SSDs are absolutely affordable now (potentially your employer will also pay for this!), so go ahead and get one, like this <a href="https://amzn.to/3WUWcUx">4TB internal SSD</a>. Note: this is an affiliate link, by buying it through that link, you help me maintain this blog =)</p> <p>In addition, get yourself a large external hard drive where you do regular backups. Apart from an online backup tool like OneDrive or pcloud, I’d recommend to to regular “hard copy” backups. The external hard drive should have the same size as your internal one. I am using <a href="https://amzn.to/3YCP8xc">this one</a>.</p> <h1 id="hack-2---use-the-pomodoro-technique">Hack 2 - Use the Pomodoro technique</h1> <p>During a PhD you’ll likely have to work on many different highly complex projects. The Pomodoro technique will help you to improve focus and memory. It’s very simple - you divide your work day into 30 min work periods followed by a 5 min break and doing that over and over again. Naturally, you can adapt these times as you desire. In the 30 minutes, you focus on ONE thing only. The benefits are that you force yourself to focus on that one thing and not switch around (multi-tasking is bad!) and you also force yourself to take regular breaks, which you should use to move around, drink water, and rest your eyes and brain.</p> <p>There is an additional perk: We tend to memorize things better at the “edges” of a work unit, i.e., right what we do at the beginning at right at the end, because the brain can anchor these things better. Forcing yourself to take breaks creates more of these “edges”.</p> <p>There are numerous free tools to time your “pomodoros”. I am using <a href="https://splode.github.io/pomotroid/">Pomotroid</a> as I am writing this post, having another 17 minutes before I will take my next break. Of course, if you’re really in the flow, you can always skip a break and keep going.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/pomotroid-480.webp 480w,/assets/img/blogpostimgs/pomotroid-800.webp 800w,/assets/img/blogpostimgs/pomotroid-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/pomotroid.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Pomotroid helps you focus and take regular breaks </div> <h1 id="hack-3---take-a-speed-reading-class">Hack 3 - Take a speed reading class</h1> <p>Reading papers is absolutely crucial in any PhD or scientific position. In my library are over 1500 papers and 100 books. I used to be slow reader and found myself having to read passages over and over again because I was paying attention. An absolutely crazy thing that I learned is this one: the best way to avoid drifting off when reading is… reading faster! This was so counter-intuitive to me, but it actually works! Your brain is absolutely focused on the text at hand and will not drift off as easily.</p> <p>There are courses that help you read faster and memorize more at the same time. If you allocate a day per week on reading, and increase your reading speed by 20%, you will save 2 months of time in a 4-year PhD program (neglecting the other positive effects like avoiding drifting off and memorizing better).</p> <p>I took a class with <a href="https://irisreading.com/">Iris Reading</a> (not affiliated) but there are probably many other courses out there. I found this to be well worth the money.</p> <h1 id="hack-4---boost-your-note-taking">Hack 4 - Boost your note taking</h1> <p>Writing proper notes is critical to store, find, and recall all the information that we learn during our PhD, and here you can really supercharge your note taking by spending some time developing a system that works for you. Number one is the tool. I use <a href="https://obsidian.md">Obsidian</a> and I am very happy, but other tools like OneNote also work well and you will have to try out which one you like best.</p> <p>What’s more important in my experience is <em>how</em> you take notes… In the beginning, I simply summarized every paper I read. But this did not really make sense. Our brain needs connections, so a better approach is to collect information on a given topic and link multiple papers together. Furthermore, you can link related notes. See my example below. This also helps in your writing process because you have all related information connected.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/obsidian-480.webp 480w,/assets/img/blogpostimgs/obsidian-800.webp 800w,/assets/img/blogpostimgs/obsidian-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/obsidian.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Example of one of my notes, collecting information on one topic and linking various papers (marked with @) and other notes together. </div> <p>An additional tip: Take notes in every meeting. Then you can always look back, e.g., at what your advisor told you or what was decided on in a group. This will also help you pay attention during a meeting and not doze off.</p> <h1 id="hack-5---use-anki-to-remember-everything">Hack 5 - Use Anki to remember everything</h1> <p>Yeah, nowadays we can look everything up very quickly. But it does take time and in discussions you want to immediately know the facts by heart. Furthermore, you want to be able to immediately validate or challenge others’ claims. For instance, if you read a paper stating how much carbon is stored in the world’s forests, you want to immediately be able to validate that (it’s 860 GtC by the way, I know that because I am using Anki).</p> <p><a href="https://apps.ankiweb.net/">Anki</a> is a free flashcard system that works on your phone or computer. The flash cards you give it to it will be shown to you in a spaced repetition fashion – stuff that you easily know will only be asked in the far future. Things that you struggle memorizing will re-appear very soon. This is based on science, showing that the best time to look at a note again is right at the point where you’re about to forget it. This is what Anki does.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/anki-480.webp 480w,/assets/img/blogpostimgs/anki-800.webp 800w,/assets/img/blogpostimgs/anki-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/anki.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> An example of the Anki app on my computer. </div> <p>The best part is, you can include it in your note taking tools, for instance Obsidian, see the example below. I only need to write <code class="language-plaintext highlighter-rouge">#flashcard</code> to let the Obsidian plugin know that the lines before and after should be exported into a new flashcard with Anki. Creating the flashcards also is a first very helpful task in making the information more memorable. Apart from important numbers you can also add the citation to most important things. Then you will easily remember in which paper something was mentioned (for the forest carbon, its Pan et al. (2011), by the way =D).</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/obsidian_anki-480.webp 480w,/assets/img/blogpostimgs/obsidian_anki-800.webp 800w,/assets/img/blogpostimgs/obsidian_anki-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/obsidian_anki.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> An example of my note taking app that is connected to Anki. Any mention of `#flashcard` will create an Anki card from the note. </div> <p>On a side note, Anki also offers pre-made flashcards like “Spanish 5000” which can help you learn pretty much anything, hablar español por ejemplo!</p> <h1 id="hack-6---learn-to-say-no">Hack 6 - Learn to say “no”</h1> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/no-480.webp 480w,/assets/img/blogpostimgs/no-800.webp 800w,/assets/img/blogpostimgs/no-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/no.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="200" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> You gotta say "no" sometimes. </div> <p>This is a complicated one. But I think it’s important. Every “no” you say to something means you can focus on more important things and avoid getting off track. So, even though it might be hard, you sometimes have to say no…</p> <ul> <li>to your supervisor <ul> <li>she/he will not like that, but maybe you need to focus on something</li> <li>perhaps you can formulate it like “well, I can do task X by next week, but this means that I will not be able to finish Y by next week.”</li> </ul> </li> <li>to your co-authors <ul> <li>remember, it is extremely easy as a co-author to suggest things you could do, papers you should read, and so on</li> <li>but you don’t have to do <em>all</em> these things <ul> <li>you can always say: “this is a great comment, I will keep this in mind for a follow-up study”</li> </ul> </li> </ul> </li> <li>to side-projects <ul> <li>there is always too much interesting stuff to do</li> </ul> </li> <li>to yourself <ul> <li>it might be heart-breaking, but it will often happen that stuff you worked on for a long time will go into the trash bin.</li> <li>you can not cling to everything you did, sometimes you have to face it and say “no, I simply cannot use this for the paper, it has to go”</li> </ul> </li> </ul> <h1 id="hack-7---take-a-writing-class">Hack 7 - Take a writing class</h1> <p>Even with ground-breaking results you probably need to properly write them down to have the journal accept it for publication. And let’s face it, our results are often rather incremental, especially during the beginning of a PhD… So, you want to make sure that the quality of your writing is good!</p> <p>When I review a paper for a journal, and I see bad grammar, poor formatting, and ugly figures, I can’t help but think that this work is probably not gonna be great (to be honest, this often turns out to be true). You should avoid this at any cost! The writing and presentation of your results should be impeccable!</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/writing-480.webp 480w,/assets/img/blogpostimgs/writing-800.webp 800w,/assets/img/blogpostimgs/writing-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/writing.jpg" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Invest some time to improve your writing. Picture from pexels.com - RF._.studio. </div> <p>Writing is hard, so invest some time to get better at it. There are many books out there to help, I have come to like these two:</p> <ul> <li><a href="https://amzn.to/4dkxJ0M">Cargill and O’Connor - Writing Scientific Research Articles</a></li> <li><a href="https://amzn.to/46Fpj1t">Joshua Schimel: Writing Science: How to Write Papers That Get Cited and Proposals That Get Funded</a></li> </ul> <p>You could propose in your group to make a reading group for the books! There are also classes offered online, for instance by <a href="https://masterclasses.nature.com/online-course-in-scientific-writing-and-publishing/16507840">Nature Masterclasses</a> (not affiliated).</p> <p>Your first paper is gonna take forever to write anyway. Taking time to improve your writing will be well-invested time.</p> <h1 id="hack-8---use-ai-tools">Hack 8 - Use AI tools</h1> <p>AI is out there and if you’re not using it you are giving yourself a competitive disadvantage. One could write a whole book on AI tools and how to use them for science, so I will not go into detail here. quillbot is a helpful tool to paraphrase text, as is ChatGPT. I have found jenny.ai to be a good tool to write introductory text, providing you also some suggestions for papers to cite. What is extremely important here is that, for instance with ChatGPT, you cannot trust it in scientific questions. It will literally make up papers that do not exist and happily provide you with information from these papers and even a made-up DOI. So be careful!</p> <p>One tool that I have only recently started to use but already found incredibly useful is <a href="https://www.scite.ai">scite</a>. Since I do not have enough knowledge yet, I would like to refer to this <a href="https://www.youtube.com/watch?v=4tjfIJg40MY">YouTube</a> video that explains nicely how this tool can boost your research, for instance by finding sources for a claim, or by showing that there are papers contradicting a given one. This can be incredibly helpful.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogpostimgs/sciteai-480.webp 480w,/assets/img/blogpostimgs/sciteai-800.webp 800w,/assets/img/blogpostimgs/sciteai-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blogpostimgs/sciteai.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="400" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Scite tells us that there are a 4 papers that contradict this one and 11 editorial notices. </div> <p>Again, with all AI tools: make sure you doublecheck the information these tools provide to you!</p> <h1 id="hack-9---invite-yourself-to-other-groups">Hack 9 - Invite yourself to other groups</h1> <p>Science builds on collaboration and papers nowadays often have dozens of co-authors. So, to get more input, and also to develop a standing in the science community, you want people out there to know you. This is also important to score a job after your PhD! Consequently, you need to network. And you supervisor probably does not have money to send you to every conference there is.</p> <p>But in times of online or hybrid meetings, you can easily score a little presentation at another group! If you have something interesting to say this is a win-win situation! You can just write someone from your group saying “hey I see you are doing something similar, perhaps we can profit from each other’s work. I’d he happy to give a presentation on my latest results in your group meeting”. I have found that this usually works. Especially if you have published something that you can refer to. Research groups are always happy to get new inputs and make collaborations, so you can profit from this as well =)</p> <p>BTW, this also holds for exchange visits at other groups. Inform yourself of possible funding from your home institution.</p> <h1 id="conclusion">Conclusion</h1> <p>I have shown you 9 hacks that helped me during the years of my PhD (and after). They cover aspects of data handling, reading, note-taking, writing, and networking. Hopefully, some of these hacks are also useful to you and I sure hope there were some that you wouldn’t have thought about. Of course, everyone is different, but I think the points raised here are pretty important for anyone working in science.</p> <p>Wishing you good luck on your PhD!</p>]]></content><author><name></name></author><category term="phd"/><category term="phd"/><summary type="html"><![CDATA[With these tips you can supercharge your PhD or working experience]]></summary></entry></feed>